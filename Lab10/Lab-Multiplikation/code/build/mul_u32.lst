


ARM Macro Assembler    Page 1 


    1 00000000         ;* -----------------------------------------------------
                       -------------
    2 00000000         ;* --  _____       ______  _____                        
                                   -
    3 00000000         ;* -- |_   _|     |  ____|/ ____|                       
                                   -
    4 00000000         ;* --   | |  _ __ | |__  | (___    Institute of Embedded
                        Systems    -
    5 00000000         ;* --   | | | '_ \|  __|  \___ \   Zurich University of 
                                   -
    6 00000000         ;* --  _| |_| | | | |____ ____) |  Applied Sciences     
                                   -
    7 00000000         ;* -- |_____|_| |_|______|_____/   8401 Winterthur, Swit
                       zerland     -
    8 00000000         ;* -----------------------------------------------------
                       -------------
    9 00000000         ;* --
   10 00000000         ;* -- Project     : CT1 - Lab 9
   11 00000000         ;* -- Description : Multiplication 32 bit unsigned
   12 00000000         ;* -- 
   13 00000000         ;* -- $Id: $
   14 00000000         ;* -----------------------------------------------------
                       -------------
   15 00000000         
   16 00000000         
   17 00000000         
   18 00000000 00000008 
                       NR_OF_TESTS
                               EQU              8
   19 00000000 00000001 
                       BITMASK_LSB
                               EQU              0x01
   20 00000000 80000000 
                       BITMASK_MSB
                               EQU              0x80000000
   21 00000000         
   22 00000000         ; ------------------------------------------------------
                       -------------
   23 00000000         ; -- Code
   24 00000000         ; ------------------------------------------------------
                       -------------
   25 00000000         
   26 00000000                 AREA             myCode, CODE, READONLY
   27 00000000         
   28 00000000                 THUMB
   29 00000000         
   30 00000000         ; ------------------------------------------------------
                       -------------
   31 00000000         ; -- Test
   32 00000000         ; ------------------------------------------------------
                       -------------   
   33 00000000         
   34 00000000         mul_u32 PROC
   35 00000000                 EXPORT           mul_u32
   36 00000000                 IMPORT           display_title
   37 00000000                 IMPORT           tests_32x32
   38 00000000 B50E            PUSH             {R1-R3,LR}
   39 00000002         
   40 00000002 4814            LDR              R0,=title



ARM Macro Assembler    Page 2 


   41 00000004 F7FF FFFE       BL               display_title
   42 00000008         
   43 00000008 4B13            LDR              R3,=result_table
   44 0000000A 4A14            LDR              R2,=values
   45 0000000C 4914            LDR              R1,=NR_OF_TESTS
   46 0000000E 4815            LDR              R0,=operation
   47 00000010 F7FF FFFE       BL               tests_32x32
   48 00000014         
   49 00000014 BD0E            POP              {R1-R3,PC}
   50 00000016                 ENDP
   51 00000016         
   52 00000016         ; ------------------------------------------------------
                       -------------
   53 00000016         ; 32 bit multiplication
   54 00000016         ; - multiplier in R0
   55 00000016         ; - multiplicand in R1
   56 00000016         ; - 64 bit result in R1:R0 (upper:lower)
   57 00000016         ; ------------------------------------------------------
                       -------------
   58 00000016         operation
                               PROC
   59 00000016 B5F0            PUSH             {R4-R7,LR}
   60 00000018         
   61 00000018         ; Instruction: do not use high registers in your code, 
   62 00000018         ; or make sure they contain thier original values
   63 00000018         ; when the function returns
   64 00000018         
   65 00000018         ; STUDENTS: To be programmed     
   66 00000018         
   67 00000018         ; R0 input: multiplier / temp. result lower word / outpu
                       t: result lower word
   68 00000018         ; R1 input: multiplicand / temp. result upper word / out
                       put: result upper word
   69 00000018         ; R2 temp. multiplicand lower word
   70 00000018         ; R3 temp. multiplicand upper word
   71 00000018         ; R4 temp. multiplier
   72 00000018         ; R5 counter
   73 00000018         ; R6 working register
   74 00000018         ; R7 working register
   75 00000018         
   76 00000018         
   77 00000018 000A            MOVS             R2, R1      ; temp. multiplican
                                                            d lower word = inpu
                                                            t: multiplicand
   78 0000001A 2300            MOVS             R3, #0      ; temp. multiplican
                                                            d upper word = 0
   79 0000001C 0004            MOVS             R4, R0      ; temp. multiplier 
                                                            = input: multiplier
                                                            
   80 0000001E 2000            MOVS             R0, #0      ; temp. result lowe
                                                            r word = 0
   81 00000020 2100            MOVS             R1, #0      ; temp. result uppe
                                                            r word = 0
   82 00000022 2500            MOVS             R5, #0      ; counter = 0
   83 00000024         while
   84 00000024         ; while(temp. multiplier != 0)
   85 00000024 2C00            CMP              R4, #0      ; Compare the temp.
                                                             multiplier with ze
                                                            ro



ARM Macro Assembler    Page 3 


   86 00000026 D013            BEQ              break       ; When the temp. mu
                                                            ltiplier is zero, b
                                                            reak the while loop
                                                            
   87 00000028         
   88 00000028         ; check for overflow of the multiplicand bevor shifting
   89 00000028 4E0F            LDR              R6, =BITMASK_MSB ; R6 = Bitmask
                                                             for MSB
   90 0000002A 4016            ANDS             R6, R6, R2  ; mask the MSB
   91 0000002C         
   92 0000002C         ; if(MSB temp. multiplicand lower word == 1)
   93 0000002C 2D00            CMP              R5, #0      ; compare the count
                                                            er with zero
   94 0000002E D005            BEQ              skipShift   ; skip overflow pro
                                                            cedure when counter
                                                             is zero
   95 00000030         
   96 00000030 005B            LSLS             R3, R3, #1  ; shift temp. multi
                                                            plicand upper word 
                                                            left by 1
   97 00000032         
   98 00000032 2E00            CMP              R6, #0      ; compare the MSB o
                                                            f the temp. multipl
                                                            icand lower word wi
                                                            th zero
   99 00000034 D001            BEQ              skipOverflow ; skip overflow pr
                                                            ocedure when MSB is
                                                             zero
  100 00000036         
  101 00000036         ; overflow procedure
  102 00000036 2601            MOVS             R6, #1      ; R6 = 1
  103 00000038 199B            ADDS             R3, R3, R6  ; Add 1 to the LSB 
                                                            of temp. multiplica
                                                            nt upper word
  104 0000003A         skipOverflow
  105 0000003A 0052            LSLS             R2, R2, #1  ; shift temp. multi
                                                            plicand lower word 
                                                            left by 1
  106 0000003C         skipShift
  107 0000003C         ; mask LSB of temp. multiplier
  108 0000003C 4E0B            LDR              R6, =BITMASK_LSB ; R6 = Bitmask
                                                             for LSB
  109 0000003E 4026            ANDS             R6, R6, R4  ; Mask the LSB
  110 00000040         
  111 00000040         ; check LSB of multiplier
  112 00000040 2E00            CMP              R6, #0      ; compare the LSB o
                                                            f multiplier with z
                                                            ero
  113 00000042 D001            BEQ              skipAdd     ; Skip addition whe
                                                            nn the MSB of the l
                                                            ower word is zero
  114 00000044         
  115 00000044 1880            ADDS             R0, R0, R2  ; Add the lower wor
                                                            d of temp. result a
                                                            nd temp. multiplica
                                                            nd
  116 00000046 4159            ADCS             R1, R1, R3  ; Add with carry th
                                                            e upper word of tem
                                                            p. result and temp.



ARM Macro Assembler    Page 4 


                                                             multiplicand  
  117 00000048         skipAdd
  118 00000048         ; count up
  119 00000048 2601            MOVS             R6, #1      ; R6 = 1
  120 0000004A 19AD            ADDS             R5, R5, R6  ; counter ++
  121 0000004C         
  122 0000004C 0864            LSRS             R4, R4, #1  ; shift the temp. m
                                                            ultiplier right by 
                                                            1
  123 0000004E E7E9            B                while       ; Goto while
  124 00000050         break
  125 00000050         
  126 00000050         ; END: To be programmed
  127 00000050         
  128 00000050 BDF0            POP              {R4-R7,PC}  ; return R0
  129 00000052                 ENDP
  130 00000052         
  131 00000052 00 00           ALIGN
  132 00000054         
  133 00000054         ; ------------------------------------------------------
                       -------------
  134 00000054         ; -- Constants
  135 00000054         ; ------------------------------------------------------
                       -------------
  136 00000054 00000000 
              00000000 
              00000000 
              00000008 
              00000000 
              80000000 
              00000001         AREA             myConstants, DATA, READONLY
  137 00000000         
  138 00000000 00000001 
                       values  DCD              0x00000001
  139 00000004 FFFFFFFF        DCD              0xffffffff
  140 00000008 FFFFFFFF 
              00000000         DCQ              0x00000000ffffffff
  141 00000010         
  142 00000010 00001717        DCD              0x00001717
  143 00000014 00004A4A        DCD              0x00004a4a
  144 00000018 06B352A6 
              00000000         DCQ              0x0000000006b352a6
  145 00000020         
  146 00000020 00001717        DCD              0x00001717
  147 00000024 FFFFFFFF        DCD              0xffffffff
  148 00000028 FFFFE8E9 
              00001716         DCQ              0x00001716FFFFE8E9
  149 00000030         
  150 00000030 73A473A4        DCD              0x73a473a4
  151 00000034 4C284C28        DCD              0x4c284c28
  152 00000038 A5A6C1A0 
              2267066D         DCQ              0x2267066da5a6c1a0
  153 00000040         
  154 00000040 43F887CC        DCD              0x43f887cc
  155 00000044 C33E6ABF        DCD              0xc33e6abf
  156 00000048 E60FC934 
              33D6E1F8         DCQ              0x33d6e1f8e60fc934
  157 00000050         
  158 00000050 E372E372        DCD              0xe372e372



ARM Macro Assembler    Page 5 


  159 00000054 00340234        DCD              0x00340234
  160 00000058 4C451728 
              002E354B         DCQ              0x002e354b4c451728
  161 00000060         
  162 00000060 22DDDD22        DCD              0x22dddd22
  163 00000064 BCCCDDDE        DCD              0xbcccddde
  164 00000068 F3641D7C 
              19B6D568         DCQ              0x19b6d568f3641d7c
  165 00000070         
  166 00000070 7FFFFFFF        DCD              0x7fffffff
  167 00000074 7FFFFFFF        DCD              0x7fffffff
  168 00000078 00000001 
              3FFFFFFF         DCQ              0x3fffffff00000001
  169 00000080         
  170 00000080 6D 75 6C 
              5F 75 33 
              32 00    title   DCB              "mul_u32", 0
  171 00000088         
  172 00000088                 ALIGN
  173 00000088         ; ------------------------------------------------------
                       -------------
  174 00000088         ; -- Variables
  175 00000088         ; ------------------------------------------------------
                       -------------
  176 00000088                 AREA             myVars, DATA, READWRITE
  177 00000000         
  178 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       result_table
                               SPACE            NR_OF_TESTS*8
  179 00000040         
  180 00000040         
  181 00000040         ; ------------------------------------------------------
                       -------------
  182 00000040         ; -- End of file
  183 00000040         ; ------------------------------------------------------
                       -------------                      
  184 00000040                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0 --depend=.\bu
ild\mul_u32.d -o.\build\mul_u32.o -I.\RTE\_Target_1 -IC:\Users\claud\AppData\Lo



ARM Macro Assembler    Page 6 


cal\Arm\Packs\InES\CTBoard14_DFP\4.0.2\Device\Include -IC:\Users\claud\AppData\
Local\Arm\Packs\InES\CTBoard14_DFP\4.0.2\Device\Include\m0 -IC:\Users\claud\App
Data\Local\Arm\Packs\InES\CTBoard14_DFP\4.0.2\HAL\Include --predefine="__EVAL S
ETA 1" --predefine="__UVISION_VERSION SETA 537" --predefine="_RTE_ SETA 1" --pr
edefine="_RTE_ SETA 1" --list=.\build\mul_u32.lst app\mul_u32.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

break 00000050

Symbol: break
   Definitions
      At line 124 in file app\mul_u32.s
   Uses
      At line 86 in file app\mul_u32.s
Comment: break used once
mul_u32 00000000

Symbol: mul_u32
   Definitions
      At line 34 in file app\mul_u32.s
   Uses
      At line 35 in file app\mul_u32.s
Comment: mul_u32 used once
myCode 00000000

Symbol: myCode
   Definitions
      At line 26 in file app\mul_u32.s
   Uses
      None
Comment: myCode unused
operation 00000016

Symbol: operation
   Definitions
      At line 58 in file app\mul_u32.s
   Uses
      At line 46 in file app\mul_u32.s
Comment: operation used once
skipAdd 00000048

Symbol: skipAdd
   Definitions
      At line 117 in file app\mul_u32.s
   Uses
      At line 113 in file app\mul_u32.s
Comment: skipAdd used once
skipOverflow 0000003A

Symbol: skipOverflow
   Definitions
      At line 104 in file app\mul_u32.s
   Uses
      At line 99 in file app\mul_u32.s
Comment: skipOverflow used once
skipShift 0000003C

Symbol: skipShift
   Definitions
      At line 106 in file app\mul_u32.s
   Uses
      At line 94 in file app\mul_u32.s
Comment: skipShift used once
while 00000024

Symbol: while



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 83 in file app\mul_u32.s
   Uses
      At line 123 in file app\mul_u32.s
Comment: while used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

myConstants 00000000

Symbol: myConstants
   Definitions
      At line 136 in file app\mul_u32.s
   Uses
      None
Comment: myConstants unused
title 00000080

Symbol: title
   Definitions
      At line 170 in file app\mul_u32.s
   Uses
      At line 40 in file app\mul_u32.s
Comment: title used once
values 00000000

Symbol: values
   Definitions
      At line 138 in file app\mul_u32.s
   Uses
      At line 44 in file app\mul_u32.s
Comment: values used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

myVars 00000000

Symbol: myVars
   Definitions
      At line 176 in file app\mul_u32.s
   Uses
      None
Comment: myVars unused
result_table 00000000

Symbol: result_table
   Definitions
      At line 178 in file app\mul_u32.s
   Uses
      At line 43 in file app\mul_u32.s
Comment: result_table used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BITMASK_LSB 00000001

Symbol: BITMASK_LSB
   Definitions
      At line 19 in file app\mul_u32.s
   Uses
      At line 108 in file app\mul_u32.s
Comment: BITMASK_LSB used once
BITMASK_MSB 80000000

Symbol: BITMASK_MSB
   Definitions
      At line 20 in file app\mul_u32.s
   Uses
      At line 89 in file app\mul_u32.s
Comment: BITMASK_MSB used once
NR_OF_TESTS 00000008

Symbol: NR_OF_TESTS
   Definitions
      At line 18 in file app\mul_u32.s
   Uses
      At line 45 in file app\mul_u32.s
      At line 178 in file app\mul_u32.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

display_title 00000000

Symbol: display_title
   Definitions
      At line 36 in file app\mul_u32.s
   Uses
      At line 41 in file app\mul_u32.s
Comment: display_title used once
tests_32x32 00000000

Symbol: tests_32x32
   Definitions
      At line 37 in file app\mul_u32.s
   Uses
      At line 47 in file app\mul_u32.s
Comment: tests_32x32 used once
2 symbols
353 symbols in table
